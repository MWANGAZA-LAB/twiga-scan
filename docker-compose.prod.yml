version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: twiga-postgres
    environment:
      POSTGRES_DB: twiga_scan
      POSTGRES_USER: twiga_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-twiga_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - twiga-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U twiga_user -d twiga_scan"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: twiga-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - twiga-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: twiga-backend
    environment:
      - DATABASE_URL=postgresql://twiga_user:${POSTGRES_PASSWORD:-twiga_secure_password}@postgres:5432/twiga_scan
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379/0
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:80}
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - twiga-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: twiga-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - twiga-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional, for SSL termination)
  nginx:
    image: nginx:alpine
    container_name: twiga-nginx
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - twiga-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local

networks:
  twiga-network:
    driver: bridge 